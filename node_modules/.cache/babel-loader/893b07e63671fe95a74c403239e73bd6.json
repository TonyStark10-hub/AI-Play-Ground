{"ast":null,"code":"var _jsxFileName = \"/Users/tony/Desktop/aiplayground/src/BodyPoseEstimation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, Component } from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport Webcam from \"react-webcam\";\nimport { drawKeypoints, drawSkeleton } from \"./bdsutilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BodyPoseEstimation() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runPosenet = async () => {\n    const net = await posenet.load({\n      inputResolution: {\n        width: 640,\n        height: 480\n      },\n      scale: 0.8\n    }); //\n\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async net => {\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; // Set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; // Make Detections\n\n      const pose = await net.estimateSinglePose(video);\n      console.log(pose);\n      drawCanvas(pose, video, videoWidth, videoHeight, canvasRef);\n    }\n  };\n\n  const drawCanvas = (pose, video, videoWidth, videoHeight, canvas) => {\n    const ctx = canvas.current.getContext(\"2d\");\n    canvas.current.width = videoWidth;\n    canvas.current.height = videoHeight;\n    drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\n    drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\n  };\n\n  runPosenet();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Body pose estimetion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"instructions\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This feature will detect your body pose in real time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"The feature will be detecting your body joints and activley replicates your body pose \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Once you start playing with this feature at least play with this feature for 1 minute before switching to other features \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 13\n  }, this);\n}\n\n_s(BodyPoseEstimation, \"AwQWgsmsPhWgADiRou0jnDEtoH4=\");\n\n_c = BodyPoseEstimation;\nexport default BodyPoseEstimation;\n\nvar _c;\n\n$RefreshReg$(_c, \"BodyPoseEstimation\");","map":{"version":3,"sources":["/Users/tony/Desktop/aiplayground/src/BodyPoseEstimation.js"],"names":["React","useRef","Component","tf","posenet","Webcam","drawKeypoints","drawSkeleton","BodyPoseEstimation","webcamRef","canvasRef","runPosenet","net","load","inputResolution","width","height","scale","setInterval","detect","current","video","readyState","videoWidth","videoHeight","pose","estimateSinglePose","console","log","drawCanvas","canvas","ctx","getContext","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import React , { useRef,Component } from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport Webcam from \"react-webcam\";\nimport { drawKeypoints, drawSkeleton } from \"./bdsutilities\";\n\nfunction BodyPoseEstimation () {\n    const webcamRef = useRef(null);\n    const canvasRef = useRef(null);\n    \n\n    const runPosenet = async () => {\n        const net = await posenet.load({\n          inputResolution: { width: 640, height: 480 },\n          scale: 0.8,\n        });\n        //\n        setInterval(() => {\n          detect(net);\n        }, 100);\n      };\n\n      const detect = async (net) => {\n        if (\n          typeof webcamRef.current !== \"undefined\" &&\n          webcamRef.current !== null &&\n          webcamRef.current.video.readyState === 4\n        ) {\n          // Get Video Properties\n          const video = webcamRef.current.video;\n          const videoWidth = webcamRef.current.video.videoWidth;\n          const videoHeight = webcamRef.current.video.videoHeight;\n    \n          // Set video width\n          webcamRef.current.video.width = videoWidth;\n          webcamRef.current.video.height = videoHeight;\n    \n          // Make Detections\n          const pose = await net.estimateSinglePose(video);\n          console.log(pose);\n    \n          drawCanvas(pose, video, videoWidth, videoHeight, canvasRef);\n        }\n      };\n\n      const drawCanvas = (pose, video, videoWidth, videoHeight, canvas) => {\n        const ctx = canvas.current.getContext(\"2d\");\n        canvas.current.width = videoWidth;\n        canvas.current.height = videoHeight;\n    \n        drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\n        drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\n      };\n    \n      runPosenet();\n        return(\n            <div className=\"App\">\n                <h1> Body pose estimetion</h1>\n                <div id='instructions'>\n        <ul>\n            <li>\n                <p>This feature will detect your body pose in real time</p>\n            </li>\n            <li>\n                <p>The feature will be detecting your body joints and activley replicates your body pose </p>\n            </li>\n            <li>\n                <p>Once you start playing with this feature at least play with this feature for 1 minute before switching to other features </p>\n            </li>\n        </ul>\n\n        </div>\n            <header className=\"App-header\">\n              <Webcam\n                ref={webcamRef}\n                style={{\n                  position: \"absolute\",\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                  left: 0,\n                  right: 0,\n                  textAlign: \"center\",\n                  zindex: 9,\n                  width: 640,\n                  height: 480,\n                }}\n              />\n      \n              <canvas\n                ref={canvasRef}\n                style={{\n                  position: \"absolute\",\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                  left: 0,\n                  right: 0,\n                  textAlign: \"center\",\n                  zindex: 9,\n                  width: 640,\n                  height: 480,\n                }}\n              />\n            </header>\n          </div>\n         \n        );\n}\n\nexport default BodyPoseEstimation;"]},"metadata":{},"sourceType":"module"}