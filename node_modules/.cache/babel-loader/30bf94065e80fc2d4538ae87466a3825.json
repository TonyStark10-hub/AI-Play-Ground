{"ast":null,"code":"import * as posenet from \"@tensorflow-models/posenet\";\nimport * as tf from \"@tensorflow/tfjs\";\nconst color = \"aqua\";\nconst boundingBoxColor = \"red\";\nconst lineWidth = 2;\nexport const tryResNetButtonName = \"tryResNetButton\";\nexport const tryResNetButtonText = \"[New] Try ResNet50\";\nconst tryResNetButtonTextCss = \"width:100%;text-decoration:underline;\";\nconst tryResNetButtonBackgroundCss = \"background:#e61d5f;\";\n\nfunction isAndroid() {\n  return /Android/i.test(navigator.userAgent);\n}\n\nfunction isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\n\nexport function isMobile() {\n  return isAndroid() || isiOS();\n}\n\nfunction setDatGuiPropertyCss(propertyText, liCssString, spanCssString = \"\") {\n  var spans = document.getElementsByClassName(\"property-name\");\n\n  for (var i = 0; i < spans.length; i++) {\n    var text = spans[i].textContent || spans[i].innerText;\n\n    if (text == propertyText) {\n      spans[i].parentNode.parentNode.style = liCssString;\n\n      if (spanCssString !== \"\") {\n        spans[i].style = spanCssString;\n      }\n    }\n  }\n}\n\nexport function updateTryResNetButtonDatGuiCss() {\n  setDatGuiPropertyCss(tryResNetButtonText, tryResNetButtonBackgroundCss, tryResNetButtonTextCss);\n}\n/**\n * Toggles between the loading UI and the main canvas UI.\n */\n\nexport function toggleLoadingUI(showLoadingUI, loadingDivId = \"loading\", mainDivId = \"main\") {\n  if (showLoadingUI) {\n    document.getElementById(loadingDivId).style.display = \"block\";\n    document.getElementById(mainDivId).style.display = \"none\";\n  } else {\n    document.getElementById(loadingDivId).style.display = \"none\";\n    document.getElementById(mainDivId).style.display = \"block\";\n  }\n}\n\nfunction toTuple({\n  y,\n  x\n}) {\n  return [y, x];\n}\n\nexport function drawPoint(ctx, y, x, r, color) {\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n}\n/**\n * Draws a line on a canvas, i.e. a joint\n */\n\nexport function drawSegment([ay, ax], [by, bx], color, scale, ctx) {\n  ctx.beginPath();\n  ctx.moveTo(ax * scale, ay * scale);\n  ctx.lineTo(bx * scale, by * scale);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n/**\n * Draws a pose skeleton by looking up all adjacent keypoints/joints\n */\n\nexport function drawSkeleton(keypoints, minConfidence, ctx, scale = 1) {\n  const adjacentKeyPoints = posenet.getAdjacentKeyPoints(keypoints, minConfidence);\n  adjacentKeyPoints.forEach(keypoints => {\n    drawSegment(toTuple(keypoints[0].position), toTuple(keypoints[1].position), color, scale, ctx);\n  });\n}\n/**\n * Draw pose keypoints onto a canvas\n */\n\nexport function drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\n  for (let i = 0; i < keypoints.length; i++) {\n    const keypoint = keypoints[i];\n\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n\n    const {\n      y,\n      x\n    } = keypoint.position;\n    drawPoint(ctx, y * scale, x * scale, 3, color);\n  }\n}\n/**\n * Draw the bounding box of a pose. For example, for a whole person standing\n * in an image, the bounding box will begin at the nose and extend to one of\n * ankles\n */\n\nexport function drawBoundingBox(keypoints, ctx) {\n  const boundingBox = posenet.getBoundingBox(keypoints);\n  ctx.rect(boundingBox.minX, boundingBox.minY, boundingBox.maxX - boundingBox.minX, boundingBox.maxY - boundingBox.minY);\n  ctx.strokeStyle = boundingBoxColor;\n  ctx.stroke();\n}\n/**\n * Converts an arary of pixel data into an ImageData object\n */\n\nexport async function renderToCanvas(a, ctx) {\n  const [height, width] = a.shape;\n  const imageData = new ImageData(width, height);\n  const data = await a.data();\n\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    const k = i * 3;\n    imageData.data[j + 0] = data[k + 0];\n    imageData.data[j + 1] = data[k + 1];\n    imageData.data[j + 2] = data[k + 2];\n    imageData.data[j + 3] = 255;\n  }\n\n  ctx.putImageData(imageData, 0, 0);\n}\n/**\n * Draw an image on a canvas\n */\n\nexport function renderImageToCanvas(image, size, canvas) {\n  canvas.width = size[0];\n  canvas.height = size[1];\n  const ctx = canvas.getContext(\"2d\");\n  ctx.drawImage(image, 0, 0);\n}\n/**\n * Draw heatmap values, one of the model outputs, on to the canvas\n * Read our blog post for a description of PoseNet's heatmap outputs\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\n */\n\nexport function drawHeatMapValues(heatMapValues, outputStride, canvas) {\n  const ctx = canvas.getContext(\"2d\");\n  const radius = 5;\n  const scaledValues = heatMapValues.mul(tf.scalar(outputStride, \"int32\"));\n  drawPoints(ctx, scaledValues, radius, color);\n}\n/**\n * Used by the drawHeatMapValues method to draw heatmap points on to\n * the canvas\n */\n\nfunction drawPoints(ctx, points, radius, color) {\n  const data = points.buffer().values;\n\n  for (let i = 0; i < data.length; i += 2) {\n    const pointY = data[i];\n    const pointX = data[i + 1];\n\n    if (pointX !== 0 && pointY !== 0) {\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = color;\n      ctx.fill();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/tony/Desktop/aiplayground/src/bdsutilities.js"],"names":["posenet","tf","color","boundingBoxColor","lineWidth","tryResNetButtonName","tryResNetButtonText","tryResNetButtonTextCss","tryResNetButtonBackgroundCss","isAndroid","test","navigator","userAgent","isiOS","isMobile","setDatGuiPropertyCss","propertyText","liCssString","spanCssString","spans","document","getElementsByClassName","i","length","text","textContent","innerText","parentNode","style","updateTryResNetButtonDatGuiCss","toggleLoadingUI","showLoadingUI","loadingDivId","mainDivId","getElementById","display","toTuple","y","x","drawPoint","ctx","r","beginPath","arc","Math","PI","fillStyle","fill","drawSegment","ay","ax","by","bx","scale","moveTo","lineTo","strokeStyle","stroke","drawSkeleton","keypoints","minConfidence","adjacentKeyPoints","getAdjacentKeyPoints","forEach","position","drawKeypoints","keypoint","score","drawBoundingBox","boundingBox","getBoundingBox","rect","minX","minY","maxX","maxY","renderToCanvas","a","height","width","shape","imageData","ImageData","data","j","k","putImageData","renderImageToCanvas","image","size","canvas","getContext","drawImage","drawHeatMapValues","heatMapValues","outputStride","radius","scaledValues","mul","scalar","drawPoints","points","buffer","values","pointY","pointX"],"mappings":"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","sourcesContent":["import * as posenet from \"@tensorflow-models/posenet\";\nimport * as tf from \"@tensorflow/tfjs\";\n\nconst color = \"aqua\";\nconst boundingBoxColor = \"red\";\nconst lineWidth = 2;\n\nexport const tryResNetButtonName = \"tryResNetButton\";\nexport const tryResNetButtonText = \"[New] Try ResNet50\";\nconst tryResNetButtonTextCss = \"width:100%;text-decoration:underline;\";\nconst tryResNetButtonBackgroundCss = \"background:#e61d5f;\";\n\nfunction isAndroid() {\n  return /Android/i.test(navigator.userAgent);\n}\n\nfunction isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\n\nexport function isMobile() {\n  return isAndroid() || isiOS();\n}\n\nfunction setDatGuiPropertyCss(propertyText, liCssString, spanCssString = \"\") {\n  var spans = document.getElementsByClassName(\"property-name\");\n  for (var i = 0; i < spans.length; i++) {\n    var text = spans[i].textContent || spans[i].innerText;\n    if (text == propertyText) {\n      spans[i].parentNode.parentNode.style = liCssString;\n      if (spanCssString !== \"\") {\n        spans[i].style = spanCssString;\n      }\n    }\n  }\n}\n\nexport function updateTryResNetButtonDatGuiCss() {\n  setDatGuiPropertyCss(\n    tryResNetButtonText,\n    tryResNetButtonBackgroundCss,\n    tryResNetButtonTextCss\n  );\n}\n\n/**\n * Toggles between the loading UI and the main canvas UI.\n */\nexport function toggleLoadingUI(\n  showLoadingUI,\n  loadingDivId = \"loading\",\n  mainDivId = \"main\"\n) {\n  if (showLoadingUI) {\n    document.getElementById(loadingDivId).style.display = \"block\";\n    document.getElementById(mainDivId).style.display = \"none\";\n  } else {\n    document.getElementById(loadingDivId).style.display = \"none\";\n    document.getElementById(mainDivId).style.display = \"block\";\n  }\n}\n\nfunction toTuple({ y, x }) {\n  return [y, x];\n}\n\nexport function drawPoint(ctx, y, x, r, color) {\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n}\n\n/**\n * Draws a line on a canvas, i.e. a joint\n */\nexport function drawSegment([ay, ax], [by, bx], color, scale, ctx) {\n  ctx.beginPath();\n  ctx.moveTo(ax * scale, ay * scale);\n  ctx.lineTo(bx * scale, by * scale);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n\n/**\n * Draws a pose skeleton by looking up all adjacent keypoints/joints\n */\nexport function drawSkeleton(keypoints, minConfidence, ctx, scale = 1) {\n  const adjacentKeyPoints = posenet.getAdjacentKeyPoints(\n    keypoints,\n    minConfidence\n  );\n\n  adjacentKeyPoints.forEach((keypoints) => {\n    drawSegment(\n      toTuple(keypoints[0].position),\n      toTuple(keypoints[1].position),\n      color,\n      scale,\n      ctx\n    );\n  });\n}\n\n/**\n * Draw pose keypoints onto a canvas\n */\nexport function drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\n  for (let i = 0; i < keypoints.length; i++) {\n    const keypoint = keypoints[i];\n\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n\n    const { y, x } = keypoint.position;\n    drawPoint(ctx, y * scale, x * scale, 3, color);\n  }\n}\n\n/**\n * Draw the bounding box of a pose. For example, for a whole person standing\n * in an image, the bounding box will begin at the nose and extend to one of\n * ankles\n */\nexport function drawBoundingBox(keypoints, ctx) {\n  const boundingBox = posenet.getBoundingBox(keypoints);\n\n  ctx.rect(\n    boundingBox.minX,\n    boundingBox.minY,\n    boundingBox.maxX - boundingBox.minX,\n    boundingBox.maxY - boundingBox.minY\n  );\n\n  ctx.strokeStyle = boundingBoxColor;\n  ctx.stroke();\n}\n\n/**\n * Converts an arary of pixel data into an ImageData object\n */\nexport async function renderToCanvas(a, ctx) {\n  const [height, width] = a.shape;\n  const imageData = new ImageData(width, height);\n\n  const data = await a.data();\n\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    const k = i * 3;\n\n    imageData.data[j + 0] = data[k + 0];\n    imageData.data[j + 1] = data[k + 1];\n    imageData.data[j + 2] = data[k + 2];\n    imageData.data[j + 3] = 255;\n  }\n\n  ctx.putImageData(imageData, 0, 0);\n}\n\n/**\n * Draw an image on a canvas\n */\nexport function renderImageToCanvas(image, size, canvas) {\n  canvas.width = size[0];\n  canvas.height = size[1];\n  const ctx = canvas.getContext(\"2d\");\n\n  ctx.drawImage(image, 0, 0);\n}\n\n/**\n * Draw heatmap values, one of the model outputs, on to the canvas\n * Read our blog post for a description of PoseNet's heatmap outputs\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\n */\nexport function drawHeatMapValues(heatMapValues, outputStride, canvas) {\n  const ctx = canvas.getContext(\"2d\");\n  const radius = 5;\n  const scaledValues = heatMapValues.mul(tf.scalar(outputStride, \"int32\"));\n\n  drawPoints(ctx, scaledValues, radius, color);\n}\n\n/**\n * Used by the drawHeatMapValues method to draw heatmap points on to\n * the canvas\n */\nfunction drawPoints(ctx, points, radius, color) {\n  const data = points.buffer().values;\n\n  for (let i = 0; i < data.length; i += 2) {\n    const pointY = data[i];\n    const pointX = data[i + 1];\n\n    if (pointX !== 0 && pointY !== 0) {\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = color;\n      ctx.fill();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}