{"ast":null,"code":"var _jsxFileName = \"/Users/tony/Desktop/aiplayground/src/BodySegmentation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, Component } from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as bodyPix from \"@tensorflow-models/body-pix\";\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BodySegmentation() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runBodysegment = async () => {\n    const net = await bodyPix.load();\n    console.log(\"BodyPix model loaded.\"); //  Loop and detect hands\n\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async net => {\n    // Check data is available\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; // Set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; // Set canvas height and width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; // Make Detections\n      // * One of (see documentation below):\n      // *   - net.segmentPerson\n      // *   - net.segmentPersonParts\n      // *   - net.segmentMultiPerson\n      // *   - net.segmentMultiPersonParts\n      // const person = await net.segmentPerson(video);\n\n      const person = await net.segmentPersonParts(video);\n      console.log(person); // const coloredPartImage = bodyPix.toMask(person);\n\n      const coloredPartImage = bodyPix.toColoredPartMask(person);\n      const opacity = 0.7;\n      const flipHorizontal = false;\n      const maskBlurAmount = 0;\n      const canvas = canvasRef.current;\n      bodyPix.drawMask(canvas, video, coloredPartImage, opacity, maskBlurAmount, flipHorizontal);\n    }\n  };\n\n  runBodysegment();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BodySegmentation, \"AwQWgsmsPhWgADiRou0jnDEtoH4=\");\n\n_c = BodySegmentation;\nexport default BodySegmentation;\n\nvar _c;\n\n$RefreshReg$(_c, \"BodySegmentation\");","map":{"version":3,"sources":["/Users/tony/Desktop/aiplayground/src/BodySegmentation.js"],"names":["React","useRef","Component","tf","bodyPix","Webcam","BodySegmentation","webcamRef","canvasRef","runBodysegment","net","load","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","person","segmentPersonParts","coloredPartImage","toColoredPartMask","opacity","flipHorizontal","maskBlurAmount","canvas","drawMask","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import React , { useRef, Component } from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as bodyPix from \"@tensorflow-models/body-pix\";\nimport Webcam from \"react-webcam\";\nfunction BodySegmentation (){\n    const webcamRef = useRef(null);\n    const canvasRef = useRef(null);\n\n    const runBodysegment = async () => {\n        const net = await bodyPix.load();\n        console.log(\"BodyPix model loaded.\");\n        //  Loop and detect hands\n        setInterval(() => {\n          detect(net);\n        }, 100);\n      };\n\n      const detect = async (net) => {\n        // Check data is available\n        if (\n          typeof webcamRef.current !== \"undefined\" &&\n          webcamRef.current !== null &&\n          webcamRef.current.video.readyState === 4\n        ) {\n          // Get Video Properties\n          const video = webcamRef.current.video;\n          const videoWidth = webcamRef.current.video.videoWidth;\n          const videoHeight = webcamRef.current.video.videoHeight;\n    \n          // Set video width\n          webcamRef.current.video.width = videoWidth;\n          webcamRef.current.video.height = videoHeight;\n    \n          // Set canvas height and width\n          canvasRef.current.width = videoWidth;\n          canvasRef.current.height = videoHeight;\n    \n          // Make Detections\n          // * One of (see documentation below):\n          // *   - net.segmentPerson\n          // *   - net.segmentPersonParts\n          // *   - net.segmentMultiPerson\n          // *   - net.segmentMultiPersonParts\n          // const person = await net.segmentPerson(video);\n          const person = await net.segmentPersonParts(video);\n          console.log(person);\n    \n          // const coloredPartImage = bodyPix.toMask(person);\n          const coloredPartImage = bodyPix.toColoredPartMask(person);\n          const opacity = 0.7;\n          const flipHorizontal = false;\n          const maskBlurAmount = 0;\n          const canvas = canvasRef.current;\n    \n          bodyPix.drawMask(\n            canvas,\n            video,\n            coloredPartImage,\n            opacity,\n            maskBlurAmount,\n            flipHorizontal\n          );\n        }\n      };\n    \n      runBodysegment();\n    \n        return(\n           \n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n      </header>\n    </div>  \n        );\n    \n}\n\nexport default BodySegmentation;"]},"metadata":{},"sourceType":"module"}