{"ast":null,"code":"var _jsxFileName = \"/Users/tony/Desktop/aiplayground/src/FaceLandMark.js\";\nimport React, { useEffect, useRef, Component } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport * as facemesh from '@tensorflow-models/face-landmarks-detection';\nimport Webcam from 'react-webcam';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FaceLandMark extends Component {\n  render() {\n    const webcamRef = useRef(null);\n    const canvaseRef = useRef(null);\n\n    const runFacemesh = async () => {\n      const net = await facemesh.load(facemesh.SupportedPackages.mediapipeFacemesh);\n      setInterval(() => {\n        detect(net);\n      }, 100);\n    };\n\n    const detect = async net => {\n      if (typeof webcamRef.current !== 'undefined' && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n        // get Video properties\n        const video = webcamRef.current.video;\n        const videoWidth = webcamRef.current.video.videoWidth;\n        const videoheight = webcamRef.current.video.videoHeight; // Set video width and height\n\n        webcamRef.current.video.width = videoWidth;\n        webcamRef.current.video.height = videoheight; // Set canvas width and height\n\n        canvaseRef.current.width = videoWidth;\n        canvaseRef.current.height = videoheight; //Make detections\n\n        const face = await net.estimateFaces({\n          input: video\n        }); //console.log(face);\n        //Get canvas context\n\n        const ctx = canvaseRef.current.getContext('2d');\n        requestAnimationFrame(() => {\n          drawMesh(face, ctx);\n        });\n      }\n    }; //Load facemesh \n\n\n    useEffect(() => {\n      runFacemesh();\n    }, []);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Welcome to Face Landmark Detection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          position: 'absolute',\n          marginLeft: 'auto',\n          marginRight: 'auto',\n          left: 0,\n          right: 0,\n          textAlign: 'center',\n          zIndex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvaseRef,\n        style: {\n          position: 'absolute',\n          marginLeft: 'auto',\n          marginRight: 'auto',\n          left: 0,\n          right: 0,\n          textAlign: 'center',\n          zIndex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default FaceLandMark;","map":{"version":3,"sources":["/Users/tony/Desktop/aiplayground/src/FaceLandMark.js"],"names":["React","useEffect","useRef","Component","tf","facemesh","Webcam","FaceLandMark","render","webcamRef","canvaseRef","runFacemesh","net","load","SupportedPackages","mediapipeFacemesh","setInterval","detect","current","video","readyState","videoWidth","videoheight","videoHeight","width","height","face","estimateFaces","input","ctx","getContext","requestAnimationFrame","drawMesh","position","marginLeft","marginRight","left","right","textAlign","zIndex"],"mappings":"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","sourcesContent":["import React , { useEffect, useRef, Component } from 'react';\nimport * as tf  from '@tensorflow/tfjs';\nimport * as facemesh from '@tensorflow-models/face-landmarks-detection';\nimport Webcam from 'react-webcam';\n\n\nclass FaceLandMark extends Component{\n    \n    render(){\n        const webcamRef = useRef(null);\n        const canvaseRef = useRef(null);\n\n\n    const runFacemesh = async () =>  {\n    const net = await facemesh.load(facemesh.SupportedPackages.mediapipeFacemesh);\n    setInterval(()=>{\n      detect(net);\n    },100);\n  };\n  \n  const detect = async(net) => {\n    if (\n      typeof webcamRef.current !== 'undefined' &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n      ){\n        // get Video properties\n        const video = webcamRef.current.video;\n        const videoWidth = webcamRef.current.video.videoWidth;\n        const videoheight = webcamRef.current.video.videoHeight;\n\n        // Set video width and height\n        webcamRef.current.video.width=videoWidth;\n        webcamRef.current.video.height=videoheight;\n\n        // Set canvas width and height\n        \n        canvaseRef.current.width=videoWidth;\n        canvaseRef.current.height=videoheight;\n\n        //Make detections\n\n        const face = await net.estimateFaces({input:video});\n        //console.log(face);\n\n        //Get canvas context\n        const ctx = canvaseRef.current.getContext('2d');\n        requestAnimationFrame(()=>{drawMesh(face,ctx)});\n\n      }\n  }\n\n  //Load facemesh \n  useEffect(()=>{runFacemesh()},[])\n        return(\n        <div>\n            <h2>Welcome to Face Landmark Detection</h2>\n            <Webcam\n           ref = {webcamRef}\n           style = {{\n           position:'absolute',\n           marginLeft:'auto',\n           marginRight:'auto',\n           left: 0,\n           right: 0,\n           textAlign: 'center',\n           zIndex: 9,\n           width: 640,\n           height: 480,\n         }}\n        />\n        <canvas\n        ref = {canvaseRef}\n        style = {{\n          position:'absolute',\n          marginLeft:'auto',\n          marginRight:'auto',\n          left: 0,\n          right: 0,\n          textAlign: 'center',\n          zIndex: 9,\n          width: 640,\n          height: 480,\n        }} \n        />\n        </div>\n         \n        );\n    }\n}\n\nexport default FaceLandMark;"]},"metadata":{},"sourceType":"module"}