{"ast":null,"code":"var _jsxFileName = \"/Users/tony/Desktop/aiplayground/src/GestureRecognition.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, Component } from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as fp from \"fingerpose\";\nimport victory from \"./victory.png\";\nimport thumbs_up from \"./thumbs_up.png\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport { drawHand } from './grutilities.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GestureRecognition() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [emoji, setEmoji] = useState(null);\n  const images = {\n    thumbs_up: thumbs_up,\n    victory: victory\n  };\n\n  const runHandpose = async () => {\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\"); //  Loop and detect hands\n\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async net => {\n    // Check data is available\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; // Set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; // Set canvas height and width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; // Make Detections\n\n      const hand = await net.estimateHands(video);\n\n      if (hand.length > 0) {\n        const GE = new fp.GestureEstimator([fp.Gestures.VictoryGesture, fp.Gestures.ThumbsUpGesture]);\n        const gesture = await GE.estimate(hand[0].landmarks, 5);\n\n        if (gesture.gestures !== 'undefined' && gesture.gestures.length > 0) {\n          const confidence = gesture.gesture.map(prediction => prediction.confidence);\n          const maxConfidence = confidence.indexOf(Math.max.apply(null, confidence));\n          setEmoji(gesture.gestures[maxConfidence].name);\n        }\n      } // Draw mesh\n\n\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  };\n\n  useEffect(() => {\n    runHandpose();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Gesture Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }, this), emoji !== null ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: images[emoji],\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 400,\n          bottom: 500,\n          right: 0,\n          textAlign: \"center\",\n          height: 100\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 19\n      }, this) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 13\n  }, this);\n}\n\n_s(GestureRecognition, \"/tRJPe6cX9CFt5+zI9C97oK8lnQ=\");\n\n_c = GestureRecognition;\nexport default GestureRecognition;\n\nvar _c;\n\n$RefreshReg$(_c, \"GestureRecognition\");","map":{"version":3,"sources":["/Users/tony/Desktop/aiplayground/src/GestureRecognition.js"],"names":["React","useState","useEffect","useRef","Component","tf","fp","victory","thumbs_up","handpose","Webcam","drawHand","GestureRecognition","webcamRef","canvasRef","emoji","setEmoji","images","runHandpose","net","load","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","hand","estimateHands","length","GE","GestureEstimator","Gestures","VictoryGesture","ThumbsUpGesture","gesture","estimate","landmarks","gestures","confidence","map","prediction","maxConfidence","indexOf","Math","max","apply","name","ctx","getContext","position","marginLeft","marginRight","left","right","textAlign","zindex","bottom"],"mappings":"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","sourcesContent":["import React , {useState,useEffect, useRef, Component } from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as fp from \"fingerpose\";\nimport victory from \"./victory.png\";\nimport thumbs_up from \"./thumbs_up.png\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport {drawHand } from './grutilities.js'\n\n\nfunction GestureRecognition(){\n    const webcamRef = useRef(null);\n    const canvasRef = useRef(null);\n    const [emoji,setEmoji] = useState(null);\n    const images = {thumbs_up:thumbs_up,victory:victory}\n\n    const runHandpose = async () => {\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async (net) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      const hand = await net.estimateHands(video);\n      \n      if (hand.length > 0){\n          const GE = new fp.GestureEstimator([\n              fp.Gestures.VictoryGesture,\n              fp.Gestures.ThumbsUpGesture\n          ]);\n          const gesture = await GE.estimate(hand[0].landmarks, 5);\n          if(gesture.gestures !== 'undefined' && gesture.gestures.length > 0){\n              const confidence = gesture.gesture.map((prediction) => prediction.confidence);\n              const maxConfidence = confidence.indexOf(Math.max.apply(null,confidence));\n\n              setEmoji(gesture.gestures[maxConfidence].name);\n          }\n      } \n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  };\n\n  useEffect(()=>{runHandpose()},[]);\n        return(\n            <div className=\"App\">\n                <h1> Gesture Recognition</h1>\n            <header className=\"App-header\">\n              <Webcam\n                ref={webcamRef}\n                style={{\n                  position: \"absolute\",\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                  left: 0,\n                  right: 0,\n                  textAlign: \"center\",\n                  zindex: 9,\n                  width: 640,\n                  height: 480,\n                }}\n              />\n      \n              <canvas\n                ref={canvasRef}\n                style={{\n                  position: \"absolute\",\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                  left: 0,\n                  right: 0,\n                  textAlign: \"center\",\n                  zindex: 9,\n                  width: 640,\n                  height: 480,\n                }}\n              />\n              {emoji !== null ? (\n                  <img \n                  src={images[emoji]}\n                  style={{\n                    position: \"absolute\",\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    left: 400,\n                    bottom: 500,\n                    right: 0,\n                    textAlign: \"center\",\n                    height: 100,\n                  }}\n                  />\n              ):\"\"}\n            </header>\n          </div>\n         \n        );\n}\n\nexport default GestureRecognition;"]},"metadata":{},"sourceType":"module"}